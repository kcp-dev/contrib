//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	trainingv1alpha1 "github.com/faroshq/kcp-ml-shop/apis/training/v1alpha1"
	scopedclientset "github.com/faroshq/kcp-ml-shop/client/clientset/versioned"
	clientset "github.com/faroshq/kcp-ml-shop/client/clientset/versioned/cluster"
	"github.com/faroshq/kcp-ml-shop/client/informers/externalversions/internalinterfaces"
	trainingv1alpha1listers "github.com/faroshq/kcp-ml-shop/client/listers/training/v1alpha1"
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

// ModelClusterInformer provides access to a shared informer and lister for
// Models.
type ModelClusterInformer interface {
	Cluster(logicalcluster.Name) ModelInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() trainingv1alpha1listers.ModelClusterLister
}

type modelClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewModelClusterInformer constructs a new informer for Model type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewModelClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredModelClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredModelClusterInformer constructs a new informer for Model type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredModelClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TrainingV1alpha1().Models().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TrainingV1alpha1().Models().Watch(context.TODO(), options)
			},
		},
		&trainingv1alpha1.Model{},
		resyncPeriod,
		indexers,
	)
}

func (f *modelClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredModelClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *modelClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&trainingv1alpha1.Model{}, f.defaultInformer)
}

func (f *modelClusterInformer) Lister() trainingv1alpha1listers.ModelClusterLister {
	return trainingv1alpha1listers.NewModelClusterLister(f.Informer().GetIndexer())
}

// ModelInformer provides access to a shared informer and lister for
// Models.
type ModelInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() trainingv1alpha1listers.ModelLister
}

func (f *modelClusterInformer) Cluster(clusterName logicalcluster.Name) ModelInformer {
	return &modelInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type modelInformer struct {
	informer cache.SharedIndexInformer
	lister   trainingv1alpha1listers.ModelLister
}

func (f *modelInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *modelInformer) Lister() trainingv1alpha1listers.ModelLister {
	return f.lister
}

type modelScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *modelScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&trainingv1alpha1.Model{}, f.defaultInformer)
}

func (f *modelScopedInformer) Lister() trainingv1alpha1listers.ModelLister {
	return trainingv1alpha1listers.NewModelLister(f.Informer().GetIndexer())
}

// NewModelInformer constructs a new informer for Model type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewModelInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredModelInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredModelInformer constructs a new informer for Model type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredModelInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TrainingV1alpha1().Models().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TrainingV1alpha1().Models().Watch(context.TODO(), options)
			},
		},
		&trainingv1alpha1.Model{},
		resyncPeriod,
		indexers,
	)
}

func (f *modelScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredModelInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
