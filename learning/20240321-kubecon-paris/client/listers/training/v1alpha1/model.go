//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	trainingv1alpha1 "github.com/faroshq/kcp-ml-shop/apis/training/v1alpha1"
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ModelClusterLister can list Models across all workspaces, or scope down to a ModelLister for one workspace.
// All objects returned here must be treated as read-only.
type ModelClusterLister interface {
	// List lists all Models in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*trainingv1alpha1.Model, err error)
	// Cluster returns a lister that can list and get Models in one workspace.
	Cluster(clusterName logicalcluster.Name) ModelLister
	ModelClusterListerExpansion
}

type modelClusterLister struct {
	indexer cache.Indexer
}

// NewModelClusterLister returns a new ModelClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewModelClusterLister(indexer cache.Indexer) *modelClusterLister {
	return &modelClusterLister{indexer: indexer}
}

// List lists all Models in the indexer across all workspaces.
func (s *modelClusterLister) List(selector labels.Selector) (ret []*trainingv1alpha1.Model, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*trainingv1alpha1.Model))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Models.
func (s *modelClusterLister) Cluster(clusterName logicalcluster.Name) ModelLister {
	return &modelLister{indexer: s.indexer, clusterName: clusterName}
}

// ModelLister can list all Models, or get one in particular.
// All objects returned here must be treated as read-only.
type ModelLister interface {
	// List lists all Models in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*trainingv1alpha1.Model, err error)
	// Get retrieves the Model from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*trainingv1alpha1.Model, error)
	ModelListerExpansion
}

// modelLister can list all Models inside a workspace.
type modelLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Models in the indexer for a workspace.
func (s *modelLister) List(selector labels.Selector) (ret []*trainingv1alpha1.Model, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*trainingv1alpha1.Model))
	})
	return ret, err
}

// Get retrieves the Model from the indexer for a given workspace and name.
func (s *modelLister) Get(name string) (*trainingv1alpha1.Model, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(trainingv1alpha1.Resource("models"), name)
	}
	return obj.(*trainingv1alpha1.Model), nil
}

// NewModelLister returns a new ModelLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewModelLister(indexer cache.Indexer) *modelScopedLister {
	return &modelScopedLister{indexer: indexer}
}

// modelScopedLister can list all Models inside a workspace.
type modelScopedLister struct {
	indexer cache.Indexer
}

// List lists all Models in the indexer for a workspace.
func (s *modelScopedLister) List(selector labels.Selector) (ret []*trainingv1alpha1.Model, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*trainingv1alpha1.Model))
	})
	return ret, err
}

// Get retrieves the Model from the indexer for a given workspace and name.
func (s *modelScopedLister) Get(name string) (*trainingv1alpha1.Model, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(trainingv1alpha1.Resource("models"), name)
	}
	return obj.(*trainingv1alpha1.Model), nil
}
